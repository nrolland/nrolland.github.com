<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>xQuant</title>
    <link href="http://xquant.net/atom.xml" rel="self" />
    <link href="http://xquant.net" />
    <id>http://xquant.net/atom.xml</id>
    <author>
        <name>Nicolas Rolland</name>
        <email></email>
    </author>
    <updated>2019-12-24T00:00:00Z</updated>
    <entry>
    <title>2019-12-24-WEEKLY_LINKS</title>
    <link href="http://xquant.net/weekly/2019-12-24-WEEKLY_LINKS.html" />
    <id>http://xquant.net/weekly/2019-12-24-WEEKLY_LINKS.html</id>
    <published>2019-12-24T00:00:00Z</published>
    <updated>2019-12-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly links for 2019-12-24</h1>
<!-- <aside>Posted on 2019-12-24</aside> -->
<article>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://www.python.org/dev/peps/pep-0484/" >PEP 484 -- Type Hints</a>
    </dt>
    <dd>This PEP introduces a provisional module to provide these standard definitions and tools, along with some conventions for situations where annotations are not available</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://plfa.github.io" >Programming Language Foundations in Agda</a>
    </dt>
    <dd>This book is an introduction to programming language theory using the proof assistant Agda.</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://utteranc.es" >utterances üîÆ</a>
    </dt>
    <dd>A lightweight comments widget built on GitHub issues. Use GitHub issues for blog comments, wiki pages and more!</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/cyrus-/relit" >cyrus-/relit: Hygienic typed literal macros (TLMs) for Reason</a>
    </dt>
    <dd>Reason, following OCaml, builds in literal notation for only a few common data structures, e.g. list literals like [x, y, z], array literals like [|x, y, z|], and JSX literals, which support an extension of HTML notation. This approach is unsatisfying because there are many other possible data structures for which literal notation might be useful, e.g. for finite maps, regular expressions, SQL queries, syntax tree representations, and chemical structures expressed using SMILES notation, to name just a few possibilities.</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/AdrianSchneider/jsonfui" >AdrianSchneider/jsonfui: jsonfui is an interactive command-line JSON viewer.</a>
    </dt>
    <dd>jsonfui<br><br>jsonfui is an interactive command-line JSON viewer. Examples</dd>
    </div>
    
</article>
]]></summary>
</entry>
<entry>
    <title>2018-12-29-WEEKLY_LINKS</title>
    <link href="http://xquant.net/weekly/2018-12-29-WEEKLY_LINKS.html" />
    <id>http://xquant.net/weekly/2018-12-29-WEEKLY_LINKS.html</id>
    <published>2018-12-29T00:00:00Z</published>
    <updated>2018-12-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly links for 2018-12-29</h1>
<!-- <aside>Posted on 2018-12-29</aside> -->
<article>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/AdrianSchneider/jsonfui" >AdrianSchneider/jsonfui: jsonfui is an interactive command-line JSON viewer.</a>
    </dt>
    <dd>jsonfui<br><br>jsonfui is an interactive command-line JSON viewer. Examples</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/tidwall/gjson#path-syntax" >tidwall/gjson: Get JSON values quickly - JSON Parser for Go</a>
    </dt>
    <dd>GJSON is a Go package that provides a fast and simple way to get values from a json document. It has features such as one line retrieval, dot notation paths, iteration, and parsing json lines</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/alphapapa/org-super-agenda" >alphapapa/org-super-agenda: Supercharge your Org daily/weekly agenda by grouping items</a>
    </dt>
    <dd>This package lets you ‚Äúsupercharge‚Äù your Org daily/weekly agenda. The idea is to group items into sections, rather than having them all in one big list</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/gchq/CyberChef" >gchq/CyberChef: The Cyber Swiss Army Knife - a web app for encryption, encoding, compression and data analysis</a>
    </dt>
    <dd>CyberChef is a simple, intuitive web app for carrying out all manner of &quot;cyber&quot; operations within a web browser. These operations include simple encoding like XOR or Base64, more complex encryption like AES, DES and Blowfish, creating binary and hexdumps, compression and decompression of data, calculating hashes and checksums, IPv6 and X.509 parsing, changing character encodings, and much more.</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://www.youtube.com/channel/UCHae4C99XJORB7Iog62wqvw/playlists" >Audio Library - Free Music - YouTube</a>
    </dt>
    <dd>Audio Library - Free Music showcases music that you can download for FREE and use in your own videos.</dd>
    </div>
    
</article>
]]></summary>
</entry>
<entry>
    <title>2018-12-23-Weekly-links</title>
    <link href="http://xquant.net/weekly/2018-12-23-Weekly-links.html" />
    <id>http://xquant.net/weekly/2018-12-23-Weekly-links.html</id>
    <published>2018-12-23T00:00:00Z</published>
    <updated>2018-12-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly links for 2018-12-23</h1>
<!-- <aside>Posted on 2018-12-23</aside> -->
<article>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/jonnay/org-babel-scheme/blob/master/org-babel-scheme.org" >org-babel-scheme/org-babel-scheme.org at master ¬∑ jonnay/org-babel-scheme</a>
    </dt>
    <dd>This is an example of both using org-babel to tangle output, and how to make a new org-babel mode for a new language. </dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/AdrianSchneider/jsonfui" >AdrianSchneider/jsonfui: jsonfui is an interactive command-line JSON viewer.</a>
    </dt>
    <dd>jsonfui<br><br>jsonfui is an interactive command-line JSON viewer. Examples</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/tidwall/gjson#path-syntax" >tidwall/gjson: Get JSON values quickly - JSON Parser for Go</a>
    </dt>
    <dd>GJSON is a Go package that provides a fast and simple way to get values from a json document. It has features such as one line retrieval, dot notation paths, iteration, and parsing json lines</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/alphapapa/org-super-agenda" >alphapapa/org-super-agenda: Supercharge your Org daily/weekly agenda by grouping items</a>
    </dt>
    <dd>This package lets you ‚Äúsupercharge‚Äù your Org daily/weekly agenda. The idea is to group items into sections, rather than having them all in one big list</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/gchq/CyberChef" >gchq/CyberChef: The Cyber Swiss Army Knife - a web app for encryption, encoding, compression and data analysis</a>
    </dt>
    <dd>CyberChef is a simple, intuitive web app for carrying out all manner of &quot;cyber&quot; operations within a web browser. These operations include simple encoding like XOR or Base64, more complex encryption like AES, DES and Blowfish, creating binary and hexdumps, compression and decompression of data, calculating hashes and checksums, IPv6 and X.509 parsing, changing character encodings, and much more.</dd>
    </div>
    
</article>
]]></summary>
</entry>
<entry>
    <title>2018-12-22-Weekly-links</title>
    <link href="http://xquant.net/weekly/2018-12-22-Weekly-links.html" />
    <id>http://xquant.net/weekly/2018-12-22-Weekly-links.html</id>
    <published>2018-12-22T00:00:00Z</published>
    <updated>2018-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly links for 2018-12-22</h1>
<!-- <aside>Posted on 2018-12-22</aside> -->
<article>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/jonnay/org-babel-scheme/blob/master/org-babel-scheme.org" >org-babel-scheme/org-babel-scheme.org at master ¬∑ jonnay/org-babel-scheme</a>
    </dt>
    <dd>This is an example of both using org-babel to tangle output, and how to make a new org-babel mode for a new language. </dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/AdrianSchneider/jsonfui" >AdrianSchneider/jsonfui: jsonfui is an interactive command-line JSON viewer.</a>
    </dt>
    <dd>jsonfui<br><br>jsonfui is an interactive command-line JSON viewer. Examples</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/tidwall/gjson#path-syntax" >tidwall/gjson: Get JSON values quickly - JSON Parser for Go</a>
    </dt>
    <dd>GJSON is a Go package that provides a fast and simple way to get values from a json document. It has features such as one line retrieval, dot notation paths, iteration, and parsing json lines</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/alphapapa/org-super-agenda" >alphapapa/org-super-agenda: Supercharge your Org daily/weekly agenda by grouping items</a>
    </dt>
    <dd>This package lets you ‚Äúsupercharge‚Äù your Org daily/weekly agenda. The idea is to group items into sections, rather than having them all in one big list</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/gchq/CyberChef" >gchq/CyberChef: The Cyber Swiss Army Knife - a web app for encryption, encoding, compression and data analysis</a>
    </dt>
    <dd>CyberChef is a simple, intuitive web app for carrying out all manner of &quot;cyber&quot; operations within a web browser. These operations include simple encoding like XOR or Base64, more complex encryption like AES, DES and Blowfish, creating binary and hexdumps, compression and decompression of data, calculating hashes and checksums, IPv6 and X.509 parsing, changing character encodings, and much more.</dd>
    </div>
    
</article>
]]></summary>
</entry>
<entry>
    <title>2018-12-21-Weekly-links</title>
    <link href="http://xquant.net/weekly/2018-12-21-Weekly-links.html" />
    <id>http://xquant.net/weekly/2018-12-21-Weekly-links.html</id>
    <published>2018-12-21T00:00:00Z</published>
    <updated>2018-12-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly links for 2018-12-21</h1>
<!-- <aside>Posted on 2018-12-21</aside> -->
<article>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/jonnay/org-babel-scheme/blob/master/org-babel-scheme.org" >org-babel-scheme/org-babel-scheme.org at master ¬∑ jonnay/org-babel-scheme</a>
    </dt>
    <dd>This is an example of both using org-babel to tangle output, and how to make a new org-babel mode for a new language. </dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/AdrianSchneider/jsonfui" >AdrianSchneider/jsonfui: jsonfui is an interactive command-line JSON viewer.</a>
    </dt>
    <dd>jsonfui<br><br>jsonfui is an interactive command-line JSON viewer. Examples</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/tidwall/gjson#path-syntax" >tidwall/gjson: Get JSON values quickly - JSON Parser for Go</a>
    </dt>
    <dd>GJSON is a Go package that provides a fast and simple way to get values from a json document. It has features such as one line retrieval, dot notation paths, iteration, and parsing json lines</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/alphapapa/org-super-agenda" >alphapapa/org-super-agenda: Supercharge your Org daily/weekly agenda by grouping items</a>
    </dt>
    <dd>This package lets you ‚Äúsupercharge‚Äù your Org daily/weekly agenda. The idea is to group items into sections, rather than having them all in one big list</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/gchq/CyberChef" >gchq/CyberChef: The Cyber Swiss Army Knife - a web app for encryption, encoding, compression and data analysis</a>
    </dt>
    <dd>CyberChef is a simple, intuitive web app for carrying out all manner of &quot;cyber&quot; operations within a web browser. These operations include simple encoding like XOR or Base64, more complex encryption like AES, DES and Blowfish, creating binary and hexdumps, compression and decompression of data, calculating hashes and checksums, IPv6 and X.509 parsing, changing character encodings, and much more.</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://www.youtube.com/channel/UCHae4C99XJORB7Iog62wqvw/playlists" >Audio Library - Free Music - YouTube</a>
    </dt>
    <dd>Audio Library - Free Music showcases music that you can download for FREE and use in your own videos.</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://chi-feng.github.io/mcmc-demo/" >The Markov-chain Monte Carlo Interactive Gallery</a>
    </dt>
    <dd>The Markov-chain Monte Carlo Interactive Gallery</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="http://hazel.org/" >Hazel, a live functional programming environment featuring typed holes.</a>
    </dt>
    <dd>Hazel is a live functional programming environment featuring typed holes.</dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://lettier.github.io/gifcurry/" >Gifcurry - lettier.com</a>
    </dt>
    <dd>video to GIF maker </dd>
    </div>
    
    <div class="bookmark">
    <dt class="bookmark_title">
     <a href="https://github.com/nix-community/NUR" >Nix User Repository: User contributed nix packages</a>
    </dt>
    <dd>The NUR was created to share new packages from the community in a faster and more decentralized way.<br><br>NUR automatically check its list of repositories and perform evaluation checks before it propagated the updates</dd>
    </div>
    
</article>
]]></summary>
</entry>
<entry>
    <title>Directed Acyclic Graphs</title>
    <link href="http://xquant.net/notes/graphvalue/readme.html" />
    <id>http://xquant.net/notes/graphvalue/readme.html</id>
    <published>2017-02-03T00:00:00Z</published>
    <updated>2017-02-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February  3, 2017
    
</div>
<div class="info">
    
</div>


<h5 id="section"></h5>
<hr />
<h2 id="representing-graphs">Representing graphs</h2>
<p>There are a few ways to represent a graph:</p>
<ul>
<li>as a list of Nodes and a list of edges</li>
<li>as a list of neighbors</li>
</ul>
<p>each representation is optimized for a runtime behaviour (cf Kormen) but it‚Äôs useful to abstract representation to express operations. A convenient way to abstract over those representations is shown in <a href="https://scholar.google.fr/scholar?cluster=6598618604128829558&amp;hl=en&amp;as_sdt=0,5&amp;sciodt=0,5">Fun with type function</a></p>
<p>But what if we could abuse haskell somehow to represent graph not with some external description but with haskell itself ?</p>
<hr />
<h2 id="breaking-referential-transparency">Breaking referential transparency</h2>
<p>We want to write graph that way</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="ot">graph1 ::</span> <span class="dt">Tree</span> <span class="dt">IntTreeF</span></a>
<a class="sourceLine" id="cb1-2" title="2">graph1 <span class="fu">=</span> iNode (iNode (iLeaf <span class="dv">2</span>) a) b</a>
<a class="sourceLine" id="cb1-3" title="3">           <span class="kw">where</span> a <span class="fu">=</span> iNode (iNode (iLeaf <span class="dv">2</span>)(iLeaf <span class="dv">2</span>)) (iLeaf <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb1-4" title="4">                 b <span class="fu">=</span> a</a></code></pre></div>
<p>instead of some variation of</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1"><span class="co">-- graph1&#39; = mkDag (Node (Node (Leaf 2) (Ref 0)) (Ref 0)) [(0, Node (Node (Leaf 2) (Leaf 2)) (Leaf 2))]</span></a></code></pre></div>
<p>But normally, in Haskell there should be no way to distinguish graph1 from</p>
<p>from</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="ot">graph2 ::</span> <span class="dt">Tree</span> <span class="dt">IntTreeF</span></a>
<a class="sourceLine" id="cb3-2" title="2">graph2 <span class="fu">=</span>  iNode (iNode (iLeaf <span class="dv">2</span>) a) b</a>
<a class="sourceLine" id="cb3-3" title="3">           <span class="kw">where</span> a <span class="fu">=</span> iNode (iNode (iLeaf <span class="dv">2</span>) (iLeaf <span class="dv">2</span>)) (iLeaf <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb3-4" title="4">                 b <span class="fu">=</span> iNode (iNode (iLeaf <span class="dv">2</span>) (iLeaf <span class="dv">2</span>)) (iLeaf <span class="dv">2</span>)</a></code></pre></div>
<p>But we can actually abuse haskell by going to <code>IO</code> and relying on some implementation of GHC to observe the sharing using <a href="https://scholar.google.fr/scholar?cluster=13707349448701947240&amp;hl=en&amp;as_sdt=0,5&amp;sciodt=0,5">Type-safe observable sharing in Haskell</a> a technique implemented and extended in <a href="http://hackage.haskell.org/package/data-reify">data-reify</a></p>
<p>With this we can produce two different output for two values which <em>should have been</em> be undistinguishable.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">graph1</th>
<th style="text-align: center;">graph2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="static/graph1.svg" /></td>
<td style="text-align: center;"><img src="static/graph2.svg" /></td>
</tr>
</tbody>
</table>
<p>basically the second graph is maximal sharing of subnodes. because we only ever use names like a and b once, they are irrelevant. whereas in the first case, this bottom leaf 2 is not really <em>any</em> leaf 2, it is the leaf which comes from <code>a</code> which should also be equal to <code>b</code> as a graph. to make sure they are equal, the equivalent relation a = b gets its own private copy which is not shared with other subgraphs.</p>
<p>using this we can directly represent graphs with haskell which is convienent and more visual than labeling nodes. indeed compare the code, visual, with the following ‚Äònormal‚Äô representation of first and second example.</p>
<p>T</p>
<ul>
<li>traversals (control - cps, mendler, launchbury coroutining fold)</li>
<li>names (polymorphism)</li>
<li>regions (applicative batching, compdata)</li>
</ul>
]]></summary>
</entry>

</feed>
